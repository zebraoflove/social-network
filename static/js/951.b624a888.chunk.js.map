{"version":3,"file":"static/js/951.b624a888.chunk.js","mappings":"uNACO,MAAMA,EAAoBC,GACtBA,EAAMC,KAAKC,SAETC,EAAkBH,GACpBA,EAAMC,KAAKG,O,uBCKtB,MAGMC,EAAiBA,KACnB,MAAMC,GAAaC,EAAAA,EAAAA,IAAYJ,GACzBK,GAA2BC,EAAAA,EAAAA,MAOjC,OANAC,EAAAA,EAAAA,YAAU,KACNF,GAASG,EAAAA,EAAAA,OACF,KACHH,GAASI,EAAAA,EAAAA,MAAwB,IAEtC,KAECC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACoB,UAAfR,IAA0BS,EAAAA,EAAAA,KAAA,OAAAD,SAAK,+BAChCC,EAAAA,EAAAA,KAACC,EAAW,KACZD,EAAAA,EAAAA,KAACE,EAAc,MACb,EAKRC,EAAqDC,EAAAA,MAAWC,IAAgB,IAAf,QAACC,GAAQD,EAE5E,OADAE,QAAQC,IAAI,oBAERV,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKS,IAAI,WAAWC,IAAKJ,EAAQK,MAAQL,EAAQK,MAAQC,EAAWC,MAAO,MAC3Ef,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,IAAEO,EAAQQ,aACbd,EAAAA,EAAAA,KAAA,SACCM,EAAQA,SACTN,EAAAA,EAAAA,KAAA,WACE,IAGRC,EAAwBA,KAC1B,MAAMc,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,IAAI7B,GAAWK,EAAAA,EAAAA,IAAYR,GAC3B,MAAOiC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,GAajD,OAHAxB,EAAAA,EAAAA,YAAU,KAAO,IAADyB,EACRH,IAAuC,QAAzBG,EAAAL,EAAkBM,eAAO,IAAAD,GAAzBA,EAA2BE,eAAe,CAACC,SAAU,WAAU,GAClF,CAACpC,KAEAW,EAAAA,EAAAA,MAAA,OAAK0B,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAb/BC,IACnB,IAAIC,EAAUD,EAAEE,cACbC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,IAC5ElB,GAAgBC,GAAgB,GAGjCD,GAAgBC,GAAgB,EACpC,EAM0EnB,SAAA,CACrEZ,EAASiD,KAAI,CAACC,EAAGC,KAAUtC,EAAAA,EAAAA,KAACG,EAAO,CAAcG,QAAS+B,GAAfA,EAAEE,OAC9CvC,EAAAA,EAAAA,KAAA,OAAKwC,IAAKzB,MACR,EAGRb,EAA2BA,KAC7B,MAAMb,GAASG,EAAAA,EAAAA,IAAYJ,IACpBkB,EAASmC,IAActB,EAAAA,EAAAA,UAAS,IACjC1B,GAA2BC,EAAAA,EAAAA,MAMjC,OACIM,EAAAA,EAAAA,KAAC0C,EAAAA,EAAK,CAAA3C,UACFD,EAAAA,EAAAA,MAAC4C,EAAAA,EAAMC,QAAO,CAAA5C,SAAA,EACVC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAK,CAACC,SAAUjB,IACba,EAAWb,EAAEE,cAAcgB,MAAM,EAClCC,YAAY,oBAAoBD,MAAOxC,KAC1CN,EAAAA,EAAAA,KAACgD,EAAAA,GAAM,CAACC,SAAqB,UAAX5D,EAAoB6D,QAX/BC,KACV7C,IACLb,GAAS2D,EAAAA,EAAAA,IAAY9C,IACrBmC,EAAW,IAAG,EAQqDY,MAAMrD,EAAAA,EAAAA,KAACsD,EAAAA,EAAY,UAE9E,EAGhB,EA7E2BC,KAChBvD,EAAAA,EAAAA,KAACV,EAAI,G","sources":["redux/chatSelectors.ts","components/Chat/ChatPage.tsx"],"sourcesContent":["import {AppStateType} from \"./redux-store\";\r\nexport const getChatMessagesS = (state: AppStateType) => {\r\n    return state.chat.messages\r\n}\r\nexport const getChatStatusS = (state: AppStateType) => {\r\n    return state.chat.status\r\n}","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Button, Input, Space} from \"antd\";\r\nimport {SendOutlined} from \"@ant-design/icons\";\r\nimport {ChatMessageAPIType} from \"../../API/ChatAPI\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatchType} from \"../../redux/redux-store\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chatReducer\";\r\nimport {getChatMessagesS, getChatStatusS} from \"../../redux/chatSelectors\";\r\nimport userPhoto from \"../../Assets/Images/user.jpg\"\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <Chat/>\r\n}\r\nconst Chat: React.FC = () => {\r\n    const chatStatus = useSelector(getChatStatusS)\r\n    const dispatch:AppDispatchType = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {chatStatus === 'error' && <div>Chat error. Refresh page.</div>}\r\n            <AllMessages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n    console.log('>>>>>>>>Message')\r\n    return (\r\n        <div>\r\n            <img alt=\"None ava\" src={message.photo ? message.photo : userPhoto} width={40}/>\r\n            <b> {message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\nconst AllMessages: React.FC = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    let messages = useSelector(getChatMessagesS)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 50) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        }\r\n        else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (isAutoScroll) messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n    }, [messages])\r\n    return (\r\n        <div style={{height: '500px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key = {m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\nconst AddMessageForm: React.FC = () => {\r\n    const status = useSelector(getChatStatusS)\r\n    const [message, setMessage] = useState('')\r\n    const dispatch:AppDispatchType = useDispatch()\r\n    const addMessage = () => {\r\n        if (!message) return\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    return (\r\n        <Space>\r\n            <Space.Compact>\r\n                <Input onChange={e => {\r\n                    setMessage(e.currentTarget.value)\r\n                }} placeholder=\"Enter new message\" value={message}/>\r\n                <Button disabled={status !== 'ready'} onClick={addMessage} icon={<SendOutlined/>}/>\r\n            </Space.Compact>\r\n        </Space>\r\n    )\r\n}\r\nexport default ChatPage"],"names":["getChatMessagesS","state","chat","messages","getChatStatusS","status","Chat","chatStatus","useSelector","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","_jsxs","children","_jsx","AllMessages","AddMessageForm","Message","React","_ref","message","console","log","alt","src","photo","userPhoto","width","userName","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useState","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","id","ref","setMessage","Space","Compact","Input","onChange","value","placeholder","Button","disabled","onClick","addMessage","sendMessage","icon","SendOutlined","ChatPage"],"sourceRoot":""}