{"version":3,"file":"static/js/876.793a90ef.chunk.js","mappings":"4IACA,QAA0B,yBAA1B,EAAiE,6BAAjE,EAA6K,gCCA7K,EAAuP,sBAAvP,EAAqR,uBAArR,EAAoT,uB,uBCKpT,MAeA,EAfqCA,IAAqB,IAApB,KAACC,EAAI,OAAEC,GAAOF,EAChD,OAAIE,GACAC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQC,SAAA,CACnBL,GACDM,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EACXG,IAAI,wFAGbL,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAOC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EACXG,IAAI,qGACRP,IACC,ECjBd,EAAmG,qBAAnG,EAAiI,uBAAjI,EAAkP,sB,cCOlP,MAYA,EAZoCD,IAAsB,IAArB,GAACS,EAAE,IAAEC,EAAG,KAAEC,GAAKX,EAChD,OACIO,EAAAA,EAAAA,KAAA,OAAAD,UAEIH,EAAAA,EAAAA,MAACS,EAAAA,GAAO,CAACC,GAAI,YAAYJ,EAAIL,UAAWU,GAAWA,EAAQC,SAAWV,EAAWA,EAAOC,SAAA,EACpFC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAASG,IAAKE,IAC7BC,MAEH,E,0ECCd,MAkBMK,EAAiBA,KACnB,MAAMC,GAA4BC,EAAAA,EAAAA,OAC3BC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,IAMvC,OACId,EAAAA,EAAAA,KAACe,EAAAA,EAAK,CAAAhB,UACFH,EAAAA,EAAAA,MAACmB,EAAAA,EAAMC,QAAO,CAAAjB,SAAA,EACVC,EAAAA,EAAAA,KAACiB,EAAAA,EAAMC,SAAQ,CAACC,WAAS,EAACC,UAAW,GAAIC,UAAQ,EAACC,SAAUC,IAAMV,EAAWU,EAAEC,cAAcC,MAAM,EAAGC,YAAY,oBAAoBD,MAAOb,KAC7IZ,EAAAA,EAAAA,KAAC2B,EAAAA,GAAM,CAACC,QATCC,KACbjB,IACJF,EAASoB,EAAAA,EAAQC,WAAWnB,IAC5BC,EAAW,IAAG,EAMyBmB,MAAMhC,EAAAA,EAAAA,KAACiC,EAAAA,EAAY,UAElD,EAGhB,EAnCqCC,KACjC,MAAMC,GAA+BC,EAAAA,EAAAA,IAAYC,EAAAA,GACjD,IAAIC,EAAUH,EAAYI,UAAUC,KAAIC,IAAKzC,EAAAA,EAAAA,KAAC0C,EAAM,CAAYtC,KAAMqC,EAAErC,KAAMF,GAAIuC,EAAEvC,GAAIC,IAAKsC,EAAEtC,KAArCsC,EAAEvC,MACxDyC,EAAWR,EAAYS,aAAaJ,KAAIK,IAAK7C,EAAAA,EAAAA,KAAC8C,EAAO,CAAYpD,KAAMmD,EAAEnD,KAAMC,OAAQkD,EAAElD,QAA9BkD,EAAE3C,MACjE,OACIN,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAUC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAcC,SACzBuC,KAEL1C,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAAD,SACK4C,KAEL3C,EAAAA,EAAAA,KAACS,EAAc,SAEjB,EC7Bd,MAGA,GAAesC,E,QAAAA,IAHKC,KACThD,EAAAA,EAAAA,KAACkC,EAAO,K","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-network/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://social-network/./src/components/Dialogs/Talker/Talker.module.css?452d","components/Dialogs/Talker/Talker.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__-pKvy\",\"dialogUsers\":\"Dialogs_dialogUsers__+5vr6\",\"user\":\"Dialogs_user__mrBCg\",\"active\":\"Dialogs_active__dfGqW\",\"dialogMessages\":\"Dialogs_dialogMessages__jq4uZ\",\"messageArea\":\"Dialogs_messageArea__LxVcO\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Message_dialogs__2eteT\",\"dialogUsers\":\"Message_dialogUsers__9uJBS\",\"user\":\"Message_user__MFHC4\",\"active\":\"Message_active__O-t+L\",\"dialogMessages\":\"Message_dialogMessages__8NLNz\",\"message\":\"Message_message__AOlt7\",\"left\":\"Message_left__yyPBt\",\"right\":\"Message_right__Mv6Mz\",\"round\":\"Message_round__8kETN\"};","import s from './Message.module.css'\r\nimport React from \"react\";\r\ntype PropsType = {\r\n    text: string\r\n    belong: boolean\r\n}\r\nconst Message: React.FC<PropsType> = ({text, belong}) => {\r\n    if (belong) return (\r\n        <div className={s.right}>\r\n            {text}\r\n            <img className={s.round}\r\n                 src=\"https://img.magic.ly/avatar/33547eb38887821615b356ba7c886643.webp?1640654585098\"/>\r\n        </div>)\r\n    else return (\r\n        <div className={s.left}>\r\n            <img className={s.round}\r\n                 src=\"https://yt3.ggpht.com/a/AGF-l79yWhq8XPpqNUxzW6rnzB41IRgVuTr6K2PxEQ=s900-c-k-c0xffffffff-no-rj-mo\"/>\r\n            {text}\r\n        </div>)\r\n}\r\n\r\nexport default Message","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Talker_dialogs__oAp3o\",\"dialogUsers\":\"Talker_dialogUsers__ZgCZH\",\"user\":\"Talker_user__vfBWe\",\"active\":\"Talker_active__rWzF3\",\"dialogMessages\":\"Talker_dialogMessages__KNYsy\",\"message\":\"Talker_message__R7CB-\",\"round\":\"Talker_round__7+o5l\"};","import s from './Talker.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\ntype PropsType = {\r\n    id: number\r\n    ava: string\r\n    name: string\r\n}\r\nconst Talker: React.FC<PropsType> = ({id, ava, name}) => {\r\n    return (\r\n        <div>\r\n\r\n            <NavLink to={\"/dialogs/\"+id} className={navData => navData.isActive ? s.active : s.user}>\r\n                <img className={s.round} src={ava}/>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Talker","import s from './Dialogs.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport React, {useState} from \"react\";\r\nimport Talker from \"./Talker/Talker\";\r\nimport {MessageType, TalkerType} from \"../../Types/types\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDialogsPageS} from \"../../redux/dialogsSelectors\";\r\nimport {AppDispatchType} from \"../../redux/redux-store\";\r\nimport {actions} from \"../../redux/dialogsReducer\";\r\nimport {Button, Input, Space} from \"antd\";\r\nimport {SendOutlined} from \"@ant-design/icons\";\r\ntype DialogsPageType = {\r\n    usersData: Array<TalkerType>\r\n    messagesData: Array<MessageType>\r\n}\r\ntype PropsType = {\r\n}\r\nconst Dialogs: React.FC<PropsType> = () => {\r\n    const dialogsPage: DialogsPageType = useSelector(getDialogsPageS)\r\n    let talkers = dialogsPage.usersData.map(t => <Talker key={t.id} name={t.name} id={t.id} ava={t.ava}/>)\r\n    let messages = dialogsPage.messagesData.map(m => <Message key={m.id} text={m.text} belong={m.belong}/>)\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogUsers}>\r\n                {talkers}\r\n            </div>\r\n            <div className={s.dialogMessages}>\r\n                <div>\r\n                    {messages}\r\n                </div>\r\n                <AddMessageForm/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst AddMessageForm = () => {\r\n    const dispatch: AppDispatchType = useDispatch()\r\n    const [message, setMessage] = useState('')\r\n    const onAddMessage = () => {\r\n        if(!message) return\r\n        dispatch(actions.addMessage(message))\r\n        setMessage('')\r\n    }\r\n    return (\r\n        <Space>\r\n            <Space.Compact>\r\n                <Input.TextArea showCount maxLength={50} autoSize onChange={e => {setMessage(e.currentTarget.value)}} placeholder=\"Enter new message\" value={message}/>\r\n                <Button onClick={onAddMessage} icon={<SendOutlined />}/>\r\n            </Space.Compact>\r\n        </Space>\r\n    )\r\n}\r\nexport default Dialogs","import Dialogs from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport React from \"react\";\r\nconst DialogsPage = () => {\r\n    return <Dialogs/>\r\n}\r\nexport default withAuthRedirect (DialogsPage)"],"names":["_ref","text","belong","_jsxs","className","s","children","_jsx","src","id","ava","name","NavLink","to","navData","isActive","AddMessageForm","dispatch","useDispatch","message","setMessage","useState","Space","Compact","Input","TextArea","showCount","maxLength","autoSize","onChange","e","currentTarget","value","placeholder","Button","onClick","onAddMessage","actions","addMessage","icon","SendOutlined","Dialogs","dialogsPage","useSelector","getDialogsPageS","talkers","usersData","map","t","Talker","messages","messagesData","m","Message","withAuthRedirect","DialogsPage"],"sourceRoot":""}