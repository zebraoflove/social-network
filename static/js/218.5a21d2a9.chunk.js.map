{"version":3,"file":"static/js/218.5a21d2a9.chunk.js","mappings":"qKAAO,MAAMA,EAAiBC,IAC1B,IAAIC,EAMJ,OALKD,EAEO,4CAA4CE,KAAKF,KACzDC,EAAQ,yBAFRA,EAAQ,WAILA,CAAK,E,+DCOhB,MAAME,EAAkCC,IAAuC,IAAtC,WAACC,EAAU,OAAEC,EAAM,WAAEC,GAAWH,EAErE,OAAOI,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,cADmB,CAACC,MAAO,GAAIC,SAAU,GAAIC,YAAY,EAAMC,QAAS,IAC1CC,SAAUT,EAAOU,SACzDC,IAAA,IAAC,aAAEC,GAAcD,EAAA,OACdE,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAJ,SAAA,EACDR,EAAAA,EAAAA,KAAA,OAAAQ,UACIR,EAAAA,EAAAA,KAACa,EAAAA,GAAK,CAACC,SAAUvB,EAAewB,UAAWC,EAAAA,EAAQC,KAAK,QAAQC,KAAK,QAAQC,YAAY,aAE7FnB,EAAAA,EAAAA,KAAA,OAAAQ,UACIR,EAAAA,EAAAA,KAACa,EAAAA,GAAK,CAACC,UDdMM,ECcqB,EDdE5B,IACpD,IAAIC,EAMJ,OALKD,EAEMA,EAAM6B,OAASD,IACtB3B,EAAK,+BAAA6B,OAAkCF,EAAS,aAFhD3B,EAAQ,WAILA,CAAK,GCO0CsB,UAAWC,EAAAA,EAAQC,KAAK,WAAWC,KAAK,WAAWC,YAAY,gBAEzGR,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACIR,EAAAA,EAAAA,KAACa,EAAAA,GAAK,CAACI,KAAK,WAAWC,KAAK,eAAc,kBAE7CrB,IAAcc,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACXG,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACIR,EAAAA,EAAAA,KAAA,OAAKuB,IAAK1B,KACVG,EAAAA,EAAAA,KAAA,UAAQiB,KAAK,SAASO,QAASA,IAAKzB,IAAcS,SAAC,oBAEvDR,EAAAA,EAAAA,KAACa,EAAAA,GAAK,CAACK,KAAK,UAAUD,KAAK,WAAWE,YAAY,uBAEtDnB,EAAAA,EAAAA,KAAA,UAAQiB,KAAK,SAASQ,SAAUf,EAAaF,SAAC,cD1B7BY,KC6Bd,GAEN,EAyBb,EAjBwBM,KACpB,MAAMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GACrBhC,GAAa+B,EAAAA,EAAAA,IAAYE,EAAAA,IACzBC,GAA4BC,EAAAA,EAAAA,MAQlC,OAAGL,GAAe3B,EAAAA,EAAAA,KAACiC,EAAAA,GAAQ,CAACC,GAAG,cACxBvB,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACHR,EAAAA,EAAAA,KAAA,MAAAQ,SAAI,WACJR,EAAAA,EAAAA,KAACL,EAAS,CAACG,OAPAA,CAACqC,EAAkBC,KAAkD,IAAhD,cAACC,GAAyCD,EAC1EL,GAASO,EAAAA,EAAAA,IAAUH,EAAOhC,MAAOgC,EAAO/B,SAAU+B,EAAO9B,WAAY8B,EAAO7B,UAC5E+B,GAAc,EAAM,EAKOxC,WAAYA,EAAYE,WAVnCwC,KAChBR,EAAUhC,EAAAA,GAAY,MAUpB,C","sources":["Validations/ValidationLogin.ts","components/Login/Login.tsx"],"sourcesContent":["export const validateEmail = (value: string) => {\r\n    let error\r\n    if (!value) {\r\n        error = 'Required'\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        error = 'Invalid email address'\r\n    }\r\n    return error\r\n}\r\nexport const validatePassword = (minLength: number) => (value: string) => {\r\n    let error\r\n    if (!value) {\r\n        error = 'Required'\r\n    } else if (value.length < minLength) {\r\n        error = `Password must have at least ${minLength} symbols`\r\n    }\r\n    return error\r\n}","import {Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport {loginUser, getCaptcha} from \"../../redux/authReducer\";\r\nimport {validateEmail, validatePassword} from \"../../Validations/ValidationLogin\";\r\nimport {Input_} from \"../Common/FormControls/FormControls\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {AppDispatchType} from \"../../redux/redux-store\";\r\nimport {getCaptchaUrlS, getIsAuthS} from \"../../redux/authSelectors\";\r\ntype PropsTypes = {\r\n    captchaUrl: string | null\r\n    submit: (values: ValuesType, setSubmitting: FormikHelpers<ValuesType>) => void\r\n    getCaptcha: () => void\r\n}\r\nconst LoginForm: React.FC<PropsTypes> = ({captchaUrl, submit, getCaptcha}) => {\r\n    const initialValues: ValuesType = {email: '', password: '', rememberMe: true, captcha: ''}\r\n    return <Formik initialValues={initialValues} onSubmit={submit}>\r\n        {({ isSubmitting }) => (\r\n            <Form>\r\n                <div>\r\n                    <Field validate={validateEmail} component={Input_} type=\"email\" name=\"email\" placeholder=\"email\"/>\r\n                </div>\r\n                <div>\r\n                    <Field validate={validatePassword(8)} component={Input_} type=\"password\" name=\"password\" placeholder=\"password\"/>\r\n                </div>\r\n                <div>\r\n                    <Field type=\"checkbox\" name=\"rememberMe\"/> Remember me\r\n                </div>\r\n                {captchaUrl && <div>\r\n                    <div>\r\n                        <img src={captchaUrl}/>\r\n                        <button type=\"button\" onClick={()=>(getCaptcha())}>New captcha</button>\r\n                    </div>\r\n                    <Field name=\"captcha\" type=\"textarea\" placeholder=\"Insert captcha\"/>\r\n                </div>}\r\n                <button type=\"submit\" disabled={isSubmitting}>\r\n                    Submit\r\n                </button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\ntype ValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\nconst Login: React.FC = () => {\r\n    const isAuth = useSelector(getIsAuthS)\r\n    const captchaUrl = useSelector(getCaptchaUrlS)\r\n    const dispatch: AppDispatchType = useDispatch()\r\n    const getCaptcha_ = () => {\r\n        dispatch((getCaptcha))\r\n    }\r\n    const submit = (values: ValuesType, {setSubmitting}: FormikHelpers<ValuesType>) => {\r\n        dispatch(loginUser(values.email, values.password, values.rememberMe, values.captcha))\r\n        setSubmitting(false)\r\n    }\r\n    if(isAuth) return <Navigate to='/profile'/>\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginForm submit={submit} captchaUrl={captchaUrl} getCaptcha={getCaptcha_}/>\r\n    </div>\r\n}\r\nexport default Login"],"names":["validateEmail","value","error","test","LoginForm","_ref","captchaUrl","submit","getCaptcha","_jsx","Formik","initialValues","email","password","rememberMe","captcha","onSubmit","children","_ref2","isSubmitting","_jsxs","Form","Field","validate","component","Input_","type","name","placeholder","minLength","length","concat","src","onClick","disabled","Login","isAuth","useSelector","getIsAuthS","getCaptchaUrlS","dispatch","useDispatch","Navigate","to","values","_ref3","setSubmitting","loginUser","getCaptcha_"],"sourceRoot":""}